name: Docker EC2 Deploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up SSH key
        env:
          EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
        run: |
          echo "$EC2_PRIVATE_KEY" > /tmp/private_key.pem
          chmod 600 /tmp/private_key.pem

      - name: Add EC2 instance to known_hosts
        env:
          PUBLIC_KEY: ${{ secrets.PUBLIC_KEY }}
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo $PUBLIC_KEY >> ~/.ssh/known_hosts

      - name: Copy repository files to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
        run: |
          scp -i /tmp/private_key.pem -r ./* $EC2_USERNAME@$EC2_HOST:~/app

      - name: Build Docker image and run container on EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
        run: |
          ssh -i /tmp/private_key.pem $EC2_USERNAME@$EC2_HOST "
            mkdir -p ~/app
            cd ~/app
            docker ps -q | xargs -r docker container rm -f
            docker images -q | xargs -r docker rmi -f
            DOCKER_TAG=$(date +%Y%m%d%H%M%S)
            docker build -t yby-front-app:$DOCKER_TAG .
            docker run -d -p 80:80 yby-front-app:$DOCKER_TAG
          "

      - name: Cleanup
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
        run: |
          ssh -i /tmp/private_key.pem $EC2_USERNAME@$EC2_HOST "rm -rf ~/app"
          rm -f /tmp/private_key.pem
